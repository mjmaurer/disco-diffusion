From 9fb88410b729841d968d5c51d8d9c35ddb8769bf Mon Sep 17 00:00:00 2001
From: Michael Maurer <mjmaurer777@gmail.com>
Date: Thu, 15 Dec 2022 10:10:43 +0100
Subject: [PATCH] [mods] Make initial modifications

---
 warpstable_latest.ipynb | 28 ++++++++++++++++++++++------
 1 file changed, 22 insertions(+), 6 deletions(-)

diff --git a/warpstable_latest.ipynb b/warpstable_latest.ipynb
index 72a6c60..51a1006 100644
--- a/warpstable_latest.ipynb
+++ b/warpstable_latest.ipynb
@@ -1409,7 +1409,8 @@
         "          # print(frame_num)\n",
         "          first_frame = PIL.Image.open(batchFolder+f\"/{batch_name}({batchNum})_{0:06}.png\")\n",
         "          first_frame_source = batchFolder+f\"/{batch_name}({batchNum})_{0:06}.png\"\n",
-        "          seed += 1    \n",
+        "          if not video_init_seed_continuity:\n",
+        "            seed += 1\n",
         "          if resume_run and frame_num == start_frame:\n",
         "            print('if resume_run and frame_num == start_frame')\n",
         "            img_filepath = batchFolder+f\"/{batch_name}({batchNum})_{start_frame-1:06}.png\"\n",
@@ -3267,8 +3268,9 @@
       },
       "outputs": [],
       "source": [
+        "from external_settings import michael_mode, vid_input, force_vid_extract\n",
         "#@markdown ####**Basic Settings:**\n",
-        "batch_name = 'stable_warpfusion_0.5.23' #@param{type: 'string'}\n",
+        "batch_name = vid_input.split(\".\")[0] #@param{type: 'string'}\n",
         "steps =  50\n",
         "##@param [25,50,100,150,250,500,1000]{type: 'raw', allow-input: true}\n",
         "# stop_early = 0  #@param{type: 'number'}\n",
@@ -3363,8 +3365,9 @@
         "#@markdown ---\n",
         "\n",
         "#@markdown ####**Video Input Settings:**\n",
-        "\n",
-        "video_init_path = \"/content/wednesday dance.mp4\" #@param {type: 'string'}\n",
+        "from external_settings import michael_mode, vid_input, force_vid_extract\n",
+        "import os\n",
+        "video_init_path = os.path.join(initDirPath, vid_input) #@param {type: 'string'}\n",
         "\n",
         "extract_nth_frame =  1#@param {type: 'number'}\n",
         "#@markdown *Specify frame range. end_frame=0 means fill the end of video*\n",
@@ -3392,6 +3395,19 @@
         "def extractFrames(video_path, output_path, nth_frame, start_frame, end_frame):\n",
         "  createPath(output_path)\n",
         "  print(f\"Exporting Video Frames (1 every {nth_frame})...\")\n",
+        "  # Comment out above lines if you uncomment below\n",
+        "    # if not os.path.exists(output_path):\n",
+        "    #     createPath(output_path)\n",
+        "\n",
+        "    # lst = os.listdir(output_path)\n",
+        "    # folder_size = len(lst)\n",
+        "\n",
+        "    # if folder_size > 1 and not force_vid_extract:\n",
+        "    #     print(f\"Vid already extracted to: {output_path}\")\n",
+        "    #     return\n",
+        "    # else:\n",
+        "    #     print(f\"Exporting Video Frames (1 every {nth_frame})...\")\n",
+        "\n",
         "  try:\n",
         "    for f in [o.replace('\\\\','/') for o in glob(output_path+'/*.jpg')]:\n",
         "    # for f in pathlib.Path(f'{output_path}').glob('*.jpg'):\n",
@@ -4819,7 +4835,7 @@
         "dynamic_thresh = 2.\n",
         "device = 'cuda'\n",
         "# config_path = f\"{root_dir}/stable-diffusion/configs/stable-diffusion/v1-inference.yaml\"\n",
-        "model_path = \"/content/drive/MyDrive/sd-v1-3-full-ema.ckpt\" #@param {'type':'string'}\n",
+        "model_path = \"/storage/deforumsd/models/sd-v1-4.ckpt\" #@param {'type':'string'}\n",
         "import pickle\n",
         "if model_path.endswith('.pkl'):\n",
         "  with open(model_path, 'rb') as f:\n",
@@ -4872,7 +4888,7 @@
         "#@markdown After saving model as pickle, you can then load it as your usual stable diffusion model in thecell above.\\\n",
         "#@markdown The model will be saved under the same name with .pkl extenstion.\n",
         "save_model_pickle = False #@param {'type':'boolean'}\n",
-        "save_folder = \"/content/drive/MyDrive/models/\" #@param {'type':'string'}\n",
+        "save_folder = f'{root_path}/models' #@param {'type':'string'}\n",
         "if save_folder != '' and save_model_pickle:\n",
         "  os.makedirs(save_folder, exist_ok=True)\n",
         "  out_path = save_folder+model_path.replace('\\\\', '/').split('/')[-1].split('.')[0]+'.pkl'\n",
-- 
2.37.3

