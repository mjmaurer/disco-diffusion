From 654112c62ad66fa713617bdbf484f41357c96176 Mon Sep 17 00:00:00 2001
From: Michael Maurer <mjmaurer777@gmail.com>
Date: Wed, 21 Dec 2022 12:43:36 -0500
Subject: [PATCH] [mods] Detect alpha frames

---
 warpstable_latest.ipynb | 23 +++++++++++++----------
 1 file changed, 13 insertions(+), 10 deletions(-)

diff --git a/warpstable_latest.ipynb b/warpstable_latest.ipynb
index 96eb24d..e1d5d2d 100644
--- a/warpstable_latest.ipynb
+++ b/warpstable_latest.ipynb
@@ -1670,7 +1670,7 @@
         "                    frame2pil = frame2.convert('RGB').resize(image.size,warp_interp)\n",
         "                    frame2pil = np.array(frame2pil)\n",
         "                    frame2pil = (frame2pil/255.)[None,...].transpose(0, 3, 1, 2)\n",
-        "                    frame2pil = 2*torch.from_numpy(frame2pil).cuda().half()-1.\n",
+        "                    frame2pil = 2*torch.from_numpy(frame2pil).cuda().float()-1.\n",
         "                    frame2pil = sd_model.get_first_stage_encoding(sd_model.encode_first_stage(frame2pil)).half()\n",
         "                    return frame2pil\n",
         "\n",
@@ -1683,7 +1683,7 @@
         "                    # print(first_latent_source, first_latent)\n",
         "                  except: \n",
         "                    if VERBOSE:print(traceback.format_exc())\n",
-        "                    print(f'Frame with offset/position {normalize_latent_offset} not found')\n",
+        "                    print(f'{frame_num} Frame with offset/position {normalize_latent_offset} not found')\n",
         "                    if 'init' in normalize_latent:\n",
         "                      try: \n",
         "                        filename = f'{videoFramesFolder}/{0:06}.jpg'\n",
@@ -3179,17 +3179,18 @@
         "mask_video_path = '' #@param {'type':'string'}\n",
         "if extract_background_mask:\n",
         "  os.chdir(root_dir)\n",
-        "  !pip install av pims\n",
-        "  gitclone('https://github.com/Sxela/RobustVideoMattingCLI')\n",
-        "  if mask_source == 'init_video':\n",
-        "    videoFramesAlpha = videoFramesFolder+'Alpha'\n",
+        "  videoFramesAlpha = videoFramesFolder+'Alpha'\n",
+        "  maskVideoFrames = videoFramesFolder+'Mask'\n",
+        "  if not os.path.exists(videoFramesAlpha) and mask_source == 'init_video':\n",
+        "    !pip install av pims\n",
+        "    gitclone('https://github.com/Sxela/RobustVideoMattingCLI')\n",
         "    createPath(videoFramesAlpha)\n",
         "    !python \"{root_dir}/RobustVideoMattingCLI/rvm_cli.py\" --input_path \"{videoFramesFolder}\" --output_alpha \"{root_dir}/alpha.mp4\"\n",
         "    extractFrames(f\"{root_dir}/alpha.mp4\", f\"{videoFramesAlpha}\", 1, 0, 999999999)\n",
-        "  if mask_source == 'mask_video':\n",
-        "    videoFramesAlpha = videoFramesFolder+'Alpha'\n",
+        "  if (not os.path.exists(videoFramesAlpha) or not os.path.exists(maskVideoFrames)) and mask_source == 'mask_video':\n",
+        "    !pip install av pims\n",
+        "    gitclone('https://github.com/Sxela/RobustVideoMattingCLI')\n",
         "    createPath(videoFramesAlpha)\n",
-        "    maskVideoFrames = videoFramesFolder+'Mask'\n",
         "    createPath(maskVideoFrames)\n",
         "    extractFrames(mask_video_path, f\"{maskVideoFrames}\", extract_nth_frame, start_frame, end_frame)\n",
         "    !python \"{root_dir}/RobustVideoMattingCLI/rvm_cli.py\" --input_path \"{maskVideoFrames}\" --output_alpha \"{root_dir}/alpha.mp4\"\n",
@@ -3991,6 +3992,8 @@
         "          with Pool(threads) as p:\n",
         "            for i,batch in enumerate(tqdm(dl)):\n",
         "              flow_batch(i, batch, p)\n",
+        "            p.close()\n",
+        "            p.join()\n",
         "\n",
         "        del raft_model \n",
         "        gc.collect()\n",
@@ -4356,7 +4359,7 @@
         "\n",
         "#@markdown The idea comes from https://github.com/lowfuel/progrockdiffusion\n",
         "\n",
-        "enable_adjust_brightness = False #@param {'type':'boolean'}\n",
+        "enable_adjust_brightness = True #@param {'type':'boolean'}\n",
         "high_brightness_threshold = 180 #@param {'type':'number'}\n",
         "high_brightness_adjust_ratio = 0.97 #@param {'type':'number'}\n",
         "high_brightness_adjust_fix_amount = 2 #@param {'type':'number'}\n",
-- 
2.37.3

