From e97052bedf25489428b5e9181a3ab34115c2030e Mon Sep 17 00:00:00 2001
From: Michael Maurer <mjmaurer777@gmail.com>
Date: Tue, 20 Dec 2022 06:35:09 -0500
Subject: [PATCH] [mods] Made turbo steps scheduled

---
 warpstable_latest.ipynb | 57 ++++++++++++++++++++++++-----------------
 1 file changed, 34 insertions(+), 23 deletions(-)

diff --git a/warpstable_latest.ipynb b/warpstable_latest.ipynb
index fe0ee10..96eb24d 100644
--- a/warpstable_latest.ipynb
+++ b/warpstable_latest.ipynb
@@ -1231,6 +1231,7 @@
         "                 frame_override_path = f'{videoFramesFolder}/{mapped_frame_num:06}.jpg'\n",
         "                 flo_path = f\"{flo_folder}/{frame_override_path.split('/')[-1]}.npy\"\n",
         "\n",
+        "            turbo_steps = get_scheduled_arg(frame_num, turbo_steps_schedule)\n",
         "            if use_background_mask and not apply_mask_after_warp:\n",
         "              # if turbo_mode & (frame_num % int(turbo_steps) != 0):\n",
         "              #   print('disabling mask for turbo step, will be applied during turbo blend')\n",
@@ -1452,6 +1453,7 @@
         "          steps = int(get_scheduled_arg(frame_num, steps_schedule))\n",
         "          style_strength = get_scheduled_arg(frame_num, style_strength_schedule)\n",
         "          skip_steps = int(steps-steps*style_strength)\n",
+        "          turbo_steps = get_scheduled_arg(frame_num, turbo_steps_schedule)\n",
         "          # skip_steps = args.calc_frames_skip_steps\n",
         "\n",
         "          ### Turbo mode - skip some diffusions, use 3d morph for clarity and to save time\n",
@@ -1578,7 +1580,7 @@
         "          steps = int(get_scheduled_arg(frame_num, steps_schedule))\n",
         "          style_strength = get_scheduled_arg(frame_num, style_strength_schedule)\n",
         "          skip_steps = int(steps-steps*style_strength)\n",
-        "\n",
+        "          turbo_steps = get_scheduled_arg(frame_num, turbo_steps_schedule)\n",
         "\n",
         "          if perlin_init:\n",
         "              init = regen_perlin()\n",
@@ -1773,6 +1775,7 @@
         "                torch.save(latent, 'prevFrame_lat.pt')\n",
         "            filename = f'{args.batch_name}({args.batchNum})_{frame_num:06}.png'\n",
         "            image.save(f'{batchFolder}/{filename}')\n",
+        "            turbo_steps = get_scheduled_arg(frame_num, turbo_steps_schedule)\n",
         "            # np.save(latent, f'{batchFolder}/{filename[:-4]}.npy')\n",
         "            if args.animation_mode == 'Video Input':\n",
         "                          # If turbo, save a blended image\n",
@@ -1962,7 +1965,7 @@
         "    'flow_extract_nth_frame':flow_extract_nth_frame,\n",
         "    'video_init_seed_continuity': video_init_seed_continuity,\n",
         "    'turbo_mode':turbo_mode,\n",
-        "    'turbo_steps':turbo_steps,\n",
+        "    'turbo_steps_schedule':turbo_steps_schedule,\n",
         "    'turbo_preroll':turbo_preroll,\n",
         "    #warp settings\n",
         "    'flow_warp':flow_warp,\n",
@@ -2996,17 +2999,17 @@
         "from external_settings import michael_mode, vid_input, force_vid_extract\n",
         "#@markdown ####**Basic Settings:**\n",
         "batch_name = vid_input.split(\".\")[0] #@param{type: 'string'}\n",
-        "steps =  50\n",
+        "steps =  180\n",
         "##@param [25,50,100,150,250,500,1000]{type: 'raw', allow-input: true}\n",
         "# stop_early = 0  #@param{type: 'number'}\n",
         "stop_early = 0\n",
         "stop_early = min(steps-1,stop_early)\n",
         "#@markdown Specify desired output size here.\\\n",
         "#@markdown Don't forget to rerun all steps after changing the width height (including forcing optical flow generation)\n",
-        "width_height = [1280, 720]#@param{type: 'raw'}\n",
+        "width_height = [1024, 576]#@param{type: 'raw'}\n",
         "clip_guidance_scale = 0 #\n",
-        "tv_scale =  0\n",
-        "range_scale =   0\n",
+        "tv_scale =  15000\n",
+        "range_scale =   1\n",
         "cutn_batches =   4\n",
         "skip_augs = False\n",
         "\n",
@@ -3171,7 +3174,7 @@
         "#@markdown Generate background mask from your init video or use a video as a mask\n",
         "mask_source = 'init_video' #@param ['init_video','mask_video']\n",
         "#@markdown Check to rotoscope the video and create a mask from it. If unchecked, the raw monochrome video will be used as a mask.\n",
-        "extract_background_mask = False #@param {'type':'boolean'}\n",
+        "extract_background_mask = True #@param {'type':'boolean'}\n",
         "#@markdown Specify path to a mask video for mask_video mode.\n",
         "mask_video_path = '' #@param {'type':'string'}\n",
         "if extract_background_mask:\n",
@@ -3946,7 +3949,7 @@
         "\n",
         "#@markdown Use lower quality model (half-precision).\\\n",
         "#@markdown Uses half the vram, allows fitting 1500x1500+ frames into 16gigs, which the original full-precision RAFT can't do.\n",
-        "flow_lq = True #@param {type:'boolean'}\n",
+        "flow_lq = False #@param {type:'boolean'}\n",
         "#@markdown Save human-readable flow images along with motion vectors. Check /{your output dir}/videoFrames/out_flo_fwd folder.\n",
         "flow_save_img_preview = False  #@param {type:'boolean'}\n",
         "in_path = videoFramesFolder if not flow_video_init_path else flowVideoFramesFolder\n",
@@ -4584,6 +4587,11 @@
         "    text = Label(desc, layout = layout, tooltip = widget.tooltip, description_tooltip = widget.description_tooltip)\n",
         "    return HBox([text, widget]) if h else VBox([text, widget])\n",
         "\n",
+        "from external_prompts import negative_prompts, text_prompts\n",
+        "from external_settings import steps_schedule, strength_schedule, flow_blend_schedule, turbo_steps_schedule\n",
+        "import json\n",
+        "\n",
+        "\n",
         "gui_misc = {\n",
         "    \"user_comment\": Textarea(value='stable_warpfusion_v0_5_24_gui',layout=Layout(width=f'80%'),  description = 'user_comment:',  description_tooltip = 'Enter a comment to differentiate between save files.'),\n",
         "    \"blend_json_schedules\": Checkbox(value=True,description='blend_json_schedules',indent=True, description_tooltip = 'Enter a comment to differentiate between save files.', tooltip = 'Enter a comment to differentiate between save files.'),\n",
@@ -4591,8 +4599,8 @@
         "}\n",
         "\n",
         "gui_mask = {\n",
-        "    \"use_background_mask\":Checkbox(value=False,description='use_background_mask',indent=True),\n",
-        "    \"invert_mask\":Checkbox(value=False,description='invert_mask',indent=True),\n",
+        "    \"use_background_mask\":Checkbox(value=True,description='use_background_mask',indent=True),\n",
+        "    \"invert_mask\":Checkbox(value=True,description='invert_mask',indent=True),\n",
         "    \"background\": Dropdown(description='background', options = ['image', 'color', 'init_video'], value = 'init_video'), \n",
         "    \"background_source\": Text(value='red', description = 'background_source'),\n",
         "    \"apply_mask_after_warp\": Checkbox(value=True,description='apply_mask_after_warp',indent=True),\n",
@@ -4600,8 +4608,8 @@
         "}\n",
         "\n",
         "gui_turbo = {\n",
-        "    \"turbo_mode\":Checkbox(value=False,description='turbo_mode',indent=True),\n",
-        "    \"turbo_steps\": IntText(value = 3, description='turbo_steps:'),\n",
+        "    \"turbo_mode\":Checkbox(value=True,description='turbo_mode',indent=True),\n",
+        "    \"turbo_steps_schedule\": Textarea(value =json.dumps(turbo_steps_schedule), layout=Layout(width=f'80%'), description='turbo_steps_schedule:'),\n",
         "    \"colormatch_turbo\":Checkbox(value=False,description='colormatch_turbo',indent=True),\n",
         "    \"turbo_frame_skips_steps\" :  SelectionSlider(description='turbo_frame_skips_steps', options = ['70%','75%','80%','85%', '80%', '95%', '100% (don`t diffuse turbo frames, fastest)'], value = '100% (don`t diffuse turbo frames, fastest)'),\n",
         "    \"soften_consistency_mask_for_turbo_frames\": FloatSlider(value=0, min=0, max=1, step=0.05, description='soften_consistency_mask_for_turbo_frames:', readout=True, readout_format='.1f'),\n",
@@ -4611,7 +4619,7 @@
         "gui_warp = {\n",
         "    \"flow_warp\":Checkbox(value=True,description='flow_warp',indent=True),\n",
         "    \n",
-        "    \"flow_blend_schedule\" : Textarea(value='[0.8]',layout=Layout(width=f'80%'),  description = 'flow_blend_schedule:'),\n",
+        "    \"flow_blend_schedule\" : Textarea(value=json.dumps(flow_blend_schedule),layout=Layout(width=f'80%'),  description = 'flow_blend_schedule:'),\n",
         "    \"warp_num_k\": IntText(value = 8, description='warp_num_k:'),\n",
         "    \"warp_forward\": Checkbox(value=False,description='warp_forward',indent=True),\n",
         "    # \"warp_interp\": Textarea(value='PIL.Image.LANCZOS',layout=Layout(width=f'80%'),  description = 'warp_interp:'),\n",
@@ -4638,20 +4646,21 @@
         "    \"use_patchmatch_inpaiting\": FloatSlider(value=0, min=0, max=1, step=0.05, description='use_patchmatch_inpaiting:', readout=True, readout_format='.1f'),\n",
         "}\n",
         "\n",
+        "\n",
         "gui_diffusion = {\n",
-        "    \"text_prompts\" : Textarea(value='{0:[\"a beautiful highly detailed helena bonham carter as corpse bride directed by tim burton, in the style of alphonse mucha and ilya kuvshinov and peter mohrbacker, ross tran rossdraws, watercolor, featured on artstation, 70mm, rendered in octane\"]}',layout=Layout(width=f'80%'),  description = 'Prompt:'),\n",
-        "    \"negative_prompts\" :  Textarea(value='{0:[\"text, naked, nude, logo, cropped, two heads, four arms, lazy eye, blurry, unfocused\"]}', layout=Layout(width=f'80%'), description = 'Negative Prompt:'),\n",
+        "    \"text_prompts\" : Textarea(value=json.dumps(text_prompts),layout=Layout(width=f'80%'),  description = 'Prompt:'),\n",
+        "    \"negative_prompts\" :  Textarea(value=json.dumps(negative_prompts), layout=Layout(width=f'80%'), description = 'Negative Prompt:'),\n",
         "    \"depth_source\":Dropdown(description='depth_source', options = ['init', 'stylized'] , value = 'init'), \n",
-        "    \"set_seed\": IntText(value = 4275770367, description='set_seed:'),\n",
+        "    \"set_seed\": IntText(value = random.random() * 1000000, description='set_seed:'),\n",
         "    \"clamp_grad\":Checkbox(value=True,description='clamp_grad',indent=True),\n",
-        "    \"clamp_max\": FloatText(value = 2, description='clamp_max:'),\n",
-        "    \"latent_scale_schedule\":Textarea(value='[0,0]',layout=Layout(width=f'80%'),  description = 'latent_scale_schedule:'),\n",
-        "    \"init_scale_schedule\": Textarea(value='[0,0]',layout=Layout(width=f'80%'),  description = 'init_scale_schedule:'),\n",
+        "    \"clamp_max\": FloatText(value = 0.6, description='clamp_max:'),\n",
+        "    \"latent_scale_schedule\":Textarea(value='[0]',layout=Layout(width=f'80%'),  description = 'latent_scale_schedule:'),\n",
+        "    \"init_scale_schedule\": Textarea(value='[0]',layout=Layout(width=f'80%'),  description = 'init_scale_schedule:'),\n",
         "    \"sat_scale\": FloatText(value = 0, description='sat_scale:'),\n",
         "    \"init_grad\": Checkbox(value=False,description='init_grad',indent=True),\n",
         "    \"grad_denoised \" : Checkbox(value=True,description='grad_denoised',indent=True),\n",
-        "    \"steps_schedule\" : Textarea(value='[50,70]',layout=Layout(width=f'80%'),  description = 'steps_schedule:'),\n",
-        "    \"style_strength_schedule\" : Textarea(value='[0.5,0.35]',layout=Layout(width=f'80%'),  description = 'style_strength_schedule:'),\n",
+        "    \"steps_schedule\" : Textarea(value=json.dumps(steps_schedule),layout=Layout(width=f'80%'),  description = 'steps_schedule:'),\n",
+        "    \"style_strength_schedule\" : Textarea(value=json.dumps(strength_schedule),layout=Layout(width=f'80%'),  description = 'style_strength_schedule:'),\n",
         "    \"cfg_scale_schedule\": Textarea(value='[15]',layout=Layout(width=f'80%'),  description = 'cfg_scale_schedule:'),\n",
         "    \"blend_latent_to_init\": FloatSlider(value=0, min=0, max=1, step=0.05, description='blend_latent_to_init:', readout=True, readout_format='.1f', description_tooltip = 'something'),\n",
         "    # \"use_karras_noise\": Checkbox(value=False,description='use_karras_noise',indent=True),\n",
@@ -4671,7 +4680,7 @@
         "    \"latent_fixed_std\": FloatText(value = 0, description='latent_fixed_std:'),\n",
         "    \"latent_norm_4d\": Checkbox(value=True,description='latent_norm_4d',indent=True),\n",
         "    \"colormatch_frame\": Dropdown(description='colormatch_frame', options = ['off', 'stylized_frame', 'init_frame', 'stylized_frame_offset', 'init_frame_offset'], value = 'stylized_frame' ),\n",
-        "    \"color_match_frame_str\": FloatText(value = 0.2, description='color_match_frame_str:'),\n",
+        "    \"color_match_frame_str\": FloatText(value = 0.925, description='color_match_frame_str:'),\n",
         "    \"colormatch_offset\":IntText(value = 0, description='colormatch_offset:'),\n",
         "    \"colormatch_method\": Dropdown(description='colormatch_method', options = ['LAB', 'PDF', 'mean'], value = 'LAB' ),\n",
         "    # \"colormatch_regrain\": Checkbox(value=False,description='colormatch_regrain',indent=True),\n",
@@ -4856,7 +4865,7 @@
         "\n",
         "#turbo \n",
         "turbo_mode=get_value('turbo_mode',guis)\n",
-        "turbo_steps=get_value('turbo_steps',guis)\n",
+        "turbo_steps_schedule=eval(get_value('turbo_steps_schedule',guis))\n",
         "colormatch_turbo=get_value('colormatch_turbo',guis)\n",
         "turbo_frame_skips_steps=get_value('turbo_frame_skips_steps',guis)\n",
         "soften_consistency_mask_for_turbo_frames=get_value('soften_consistency_mask_for_turbo_frames',guis)\n",
@@ -5026,10 +5035,12 @@
         "    batchNum = int(run_to_resume)\n",
         "  if resume_from_frame == 'latest':\n",
         "    start_frame = len(glob(batchFolder+f\"/{batch_name}({batchNum})_*.png\"))\n",
+        "    turbo_steps = get_scheduled_arg(start_frame, turbo_steps_schedule)\n",
         "    if animation_mode != 'Video Input' and turbo_mode == True and start_frame > turbo_preroll and start_frame % int(turbo_steps) != 0:\n",
         "      start_frame = start_frame - (start_frame % int(turbo_steps))\n",
         "  else:\n",
         "    start_frame = int(resume_from_frame)+1\n",
+        "    turbo_steps = get_scheduled_arg(start_frame, turbo_steps_schedule)\n",
         "    if animation_mode != 'Video Input' and turbo_mode == True and start_frame > turbo_preroll and start_frame % int(turbo_steps) != 0:\n",
         "      start_frame = start_frame - (start_frame % int(turbo_steps))\n",
         "    if retain_overwritten_frames is True:\n",
-- 
2.37.3

